<?php

namespace Tests\Unit;

use App\Adaptors\CustomerAdaptors\FormDataToCustomer;
use App\DTOs\Customer\CustomerCreateDTO;
use App\DTOs\Customer\CustomerDeleteDTO;
use App\DTOs\Customer\CustomerFilterDTO;
use App\DTOs\Customer\CustomerUpdateDTO;
use App\Models\Customer;
use App\Models\CustomerPhone;
use App\Services\CustomerServices\Create\CreateCustomerService;
use App\Services\CustomerServices\Destroy\DestroyCustomerService;
use App\Services\CustomerServices\Fetch\FetchCustomerService;
use App\Services\CustomerServices\Update\UpdateCustomerService;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Tests\TestCase;


class CustomerTest extends TestCase
{
    use DatabaseTransactions;

    public $customerModal;
    public $customerPhoneModal;
    public $customerCreateService;
    public $customerUpdateService;
    public $customerFetchService;
    public $customerDeleteService;
    public $customerImportService;
    public $customerRepository;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->customerCreateService = $this->app->make(CreateCustomerService::class);
        $this->customerUpdateService = $this->app->make(UpdateCustomerService::class);
    }

    /**
     * Customer creation test
     *
     * @return void
     */
    public function test_customer_created()
    {
        $customerCreateData = [
            'first_name' => 'Test',
            'last_name' => 'Customer',
            'email' => 'test.customer.1@abc.com',
            'phone_numbers' => [
                '94111111111',
                '94222222222'
            ],
        ];

        $customerCreateService = $this->app->make(CreateCustomerService::class);
        $customerDto = new CustomerCreateDTO((new FormDataToCustomer($customerCreateData))->convert());
        $response = $customerCreateService->make($customerDto)->execute();
        $this->assertArrayHasKey('email', $response);
    }

    public function test_customer_update(){
        $customer = \factory(Customer::class, 1)->create()->each(function($u) {
            $u->phoneNumbers()
                ->saveMany(factory(CustomerPhone::class, 2)->make());
        });

        $customerUpdateData = [
            'id' => $customer[0]->id,
            'first_name' => $customer[0]->fist_name,
            'last_name' => 'Updated',
            'email' => 'test.customer.1@abc.com',
            'phone_numbers' => [
                '94111111111',
                '94222222222'
            ],
        ];

        $customerUpdateService = $this->app->make(UpdateCustomerService::class);
        $customerUpdateDto = new CustomerUpdateDTO($customerUpdateData);
        $response = $customerUpdateService->make($customerUpdateDto)->execute();
        $this->assertEquals('Updated', $response->last_name);
    }

    public function test_customer_delete(){
        $customer = \factory(Customer::class, 1)->create()->each(function($u) {
            $u->phoneNumbers()
                ->saveMany(factory(CustomerPhone::class, 2)->make());
        });

        $customerDeleteData = [
            'id' => $customer[0]->id
        ];

        $customerDestroyService = $this->app->make(DestroyCustomerService::class);
        $customerUpdateDto = new CustomerDeleteDTO($customerDeleteData);
        $response = $customerDestroyService->make($customerUpdateDto)->execute();
        $this->assertTrue(true === (boolean)$response);

        $customerFetchService = $this->app->make(FetchCustomerService::class);
        $customerUpdateDto = new CustomerFilterDTO(['id' => $customer[0]->id]);
        $exist = $customerFetchService->make($customerUpdateDto)->filterCustomer();
        $this->assertTrue(true == !$exist);


    }

    public function test_customer_fetch(){
        $customer = \factory(Customer::class, 10)->create()->each(function($u) {
            $u->phoneNumbers()
                ->saveMany(factory(CustomerPhone::class, 2)->make());
        });

        $customerFilterData = [
            'email' => $customer[0]->email,
            'first_name' => $customer[0]->first_name,
            'last_name' => $customer[0]->last_name,
        ];

        $customerFetchService = $this->app->make(FetchCustomerService::class);
        $customerFilterDto = new CustomerFilterDTO($customerFilterData);
        $exist = $customerFetchService->make($customerFilterDto)->execute();
        $this->assertTrue(count($exist) >= 1);


    }
}
